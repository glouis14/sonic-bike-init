#!/bin/sh
## Finding Song Home embedded system for Kaffe Matthews
## Copyright (C) 2015 Tom Keene
## 
## This program is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
## 
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
## GNU General Public License for more details.
## 
## You should have received a copy of the GNU General Public License
## along with this program. If not, see <http://www.gnu.org/licenses/>.

# Script auto-called via systemd on boot

# The configeration file
CONFIG="/home/sonic/sdcard/config.json"

# Make sure this script is runs as root so network/mount things work
LUID=$(id -u)
if [ $LUID -ne 0 ]; then
    echo "[start] $0 must be run as root"
    exit 1
fi

# Check if we need to mount the SDcard Note: Could be manged by fstab...
if [ -f $CONFIG ]; then
    # File exists
    echo "[start] Found: $CONFIG"
else
    # File doesn't exist so try mounting the sd card
    # For Beaglebone black: # mount -t vfat -o defaults,rw,umask=0 /dev/mmcblk0p1 /home/sonic/sdcard
    sudo mount -t vfat /dev/sda1 /home/sonic/sdcard -o rw # for raspberry pi
fi

# Where should we log startup messages?
LOGFILE=$(grep '"logfile"' /home/sonic/sdcard/config.json | cut -d '"' -f4)

# Which mode (app) should we startup?
MODE=$(grep '"mode"' $CONFIG | cut -d '"' -f4)
echo "[start] Found mode: $MODE" 

# Make sure we can write to the SDcard
chmod 777 /home/sonic/sdcard -R

# Setup the soundcard. Needs a little time before volume can be set
sleep 1
amixer -c 0 set PCM 100% > /dev/null  # Set initital audio volume to full

# SELECT WHICH MODE (Application) TO LOAD: This is set in  the config file on the sd card
if [ X"$MODE" = X"app-findingsong" ]; then
    cd /home/sonic/app-findingsong/src
    echo "[start] Load app-findingsong"
    ./swamp & > /dev/null
elif [ X"$MODE" = X"app-swamp" ]; then
    cd /home/sonic/app-swamp/src
    # Load the old system
    echo "--------------------startup olschool swamp system-----------------------" 
    ./swamp & > /dev/null
elif [ X"$MODE" = X"app-kayak" ]; then
    /home/sonic/sensehat/osc_serial_sprocket.py &
    pd -nogui -audiooutdev 1 -path /usr/local/lib/pd-externals/iemnet -path /usr/local/lib/pd-externals/osc /home/sonic/sonic-kayaks-puredata/patches/comboLuaPython.pd &
    cd /home/sonic/sonic-kayaks/src
    echo "[start] kayaks on bike in London Fields" 
    ./swamp & > /dev/null
elif [ X"$MODE" = X"app-sprocket" ]; then
    echo "[start] chimps on a sprocket" 
    /home/sonic/sensehat/osc_serial_sprocket.py &
    cd /home/sonic/sonic-kayaks-puredata/patches
    pd -nogui -audiooutdev 1 -path /usr/local/lib/pd-externals/iemnet -path /usr/local/lib/pd-externals/osc chimp_on_a_sprocket.pd
    # this mode was added to test Python in combination with pd
elif [ X"$MODE" = X"app-sensor-bike" ]; then
    echo "[start] sensor bike" 
    /home/sonic/app-sensor-bike/python/SensorBike_sprocketOSC.py &
    cd /home/sonic/app-sensor-bike/pd
    pd -nogui -audiooutdev 1 -path /usr/local/lib/pd-externals/iemnet -path /usr/local/lib/pd-externals/osc app_sensor_bike_1.pd
else
    echo "--------------------startup error-----------------------" >> $LOGFILE
    echo "[start] No \"mode\" set. Edit the config and specify 'app-swamp' OR 'app-findingsong' mode " >> $LOGFILE
    echo "[start error] Nothing has started. Exited. $CONFIG \n" >> $LOGFILE
    echo "[start error] No mode set in '$CONFIG': normal OR random"
fi

